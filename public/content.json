{"meta":{"title":"Scala-Play","subtitle":null,"description":null,"author":"scala-play.com","url":"https://scala-play.com"},"pages":[],"posts":[{"title":"Giới thiệu về Tuples trong Scala","slug":"scala-tuples","date":"2018-10-08T10:37:14.000Z","updated":"2018-10-11T10:22:17.385Z","comments":true,"path":"2018/10/08/scala-tuples/","link":"","permalink":"https://scala-play.com/2018/10/08/scala-tuples/","excerpt":"","text":"&nbsp;&nbsp;&nbsp;&nbsp; Trong Scala, Tuple dùng để gộp một số lượng phần tử cố định cùng với nhau. Không như array (mảng) và list (danh sách), một tuple có thể chứa object (đối tượng) với các kiểu dữ liệu khác nhau và chúng không thay đổi được giá trị. Sau đây là ví dụ về tuple lưu kiểu nguyên và kiểu chuỗi. Đây là một cách khai báo ngắn gọn: 1val t = (1, \"hello\") Cách khai báo cụ thể sẽ giống như sau:1val t = new Tuple2(1, \"hello\") Kiểu thực sự của tuple phụ thuộc vào số lượng và các phần tử và kiểu của các phần tử đó.Do đó kiểu của (99, “Luftballons”) là Tuple2[Int, String]. Kiểu của (‘u’, ‘r’, “the”, 1, 4, “me”) là Tuple6[Char, Char, String, Int, Int, String]. Tuples có kiểu Tuple1 ,Tuple2, Tuple3… .Hiện tại tuples có thể chứa tối đa 22 phần tử ,nếu muốn nhiều hơn ,bạn có thể sử dụng Collection khác ngoài tuple. Đối với mỗi kiểu TupleN , trong đó 1&lt;= N &lt;= 22 Scala định nghĩa một số phương thức truy cập phần tử với đinh nghĩa sau- 1val t = (4,3,2,1) Để truy cập các phần tử của tuple t, bạn có thể dùng phương thức t._1 để truy cập phần tử đầu tiên , t._2 để truy cập phần tử thứ hai, và tương tự . Ví dụ, biểu thức sau đây tính tổng các phần tử của tuple t. 1val sum = t._1 + t._2 + t._3 + t._4 Bạn có thể dùng Tuple để viết một phương thức lấy kiểu List[Double] làm tham số và trả về biến biến count , biến tổng sum , và tổng bình phương ,được trả về dưới kiểu Tuple 3 phần tử , kiểu Tuple3[Int, Double, Double] .Chúng cũng hữu ích khi truyền danh sách các giá trị dữ liệu dưới dạng thông điệp giữa các tác nhân trong lập trình đồng thời. Thử chương trình ví dụ sau: Ví dụ:1234567object Demo &#123; def main(args: Array[String]) &#123; val t = (4,3,2,1) val sum = t._1 + t._2 + t._3 + t._4 println( \"Sum of elements: \" + sum ) &#125;&#125; Lưu chương trình trên vào file Demo.scala. Lệnh sau đây được dùng để biên dịch và thực thi chương trình Demo. Cài đặt:12\\&gt;scalac Demo.scala\\&gt;scala Demo Kết quả:1Sum of elements: 10 Phần trên là những giới thiệu qua của mình về Tuple trong Scala. Bây giờ chúng ta sẽ đi tìm hiểu một vài phương thức thường xuyên được sử dụng trong Tuple. Phép lặp trên Tuple Bạn có thể dùng phương thức Tuple.productIterator() để lặp qua hết tất cả các phần tử của Tuple.Thử ví dụ sau để thực hiện phép lặp trên tuples. Ví dụ:123456object Demo &#123; def main(args: Array[String]) &#123; val t = (4,3,2,1) t.productIterator.foreach&#123; i =&gt;println(\"Value = \" + i )&#125; &#125;&#125; Lưu chương trình trên vào file Demo.scala. Lệnh sau đây được dùng để biên dịch và thực thi chương trình Demo. Cài đặt12\\&gt;scalac Demo.scala\\&gt;scala Demo Kết quả1234Value = 4Value = 3Value = 2Value = 1 Chuyển đổi thành chuỗi Bạn có thể sử dụng phương thức Tuple.toString () để nối tất cả các phần tử của tuple sang kiểu chuỗi. Hãy thử chương trình ví dụ sau để chuyển đổi thành Chuỗi. Ví dụ12345object Demo &#123; def main(args: Array[String]) &#123; val t = new Tuple3(1, \"hello\", Console) println(\"Concatenated String: \" + t.toString() )&#125;&#125; Lưu chương trình trên vào file Demo.scala. Lệnh sau đây được dùng để biên dịch và thực thi chương trình Demo. Cài đặt12\\&gt;scalac Demo.scala\\&gt;scala Demo Kết quả1Concatenated String: (1,hello,scala.Console$@281acd47) Đảo các phần tử trong TupleBạn có thể sử dụng phương thức Tuple.swap để hoán đổi các phần tử của Tuple2.Hãy thử chương trình ví dụ sau để hoán đổi các phần tử. Ví dụ123456object Demo &#123; def main(args: Array[String]) &#123; val t = new Tuple2(\"Scala\", \"hello\") println(\"Swapped Tuple: \" + t.swap ) &#125;&#125; Lưu chương trình trên vào file Demo.scala. Lệnh sau đây được dùng để biên dịch và thực thi chương trình Demo. Cài đặt12\\&gt;scalac Demo.scala\\&gt;scala Demo Kết quả1Swapped tuple: (hello,Scala) Nguồn tham khảohttps://www.tutorialspoint.com/scala/scala_tuples.htm","categories":[{"name":"scala","slug":"scala","permalink":"https://scala-play.com/categories/scala/"}],"tags":[{"name":"basic","slug":"basic","permalink":"https://scala-play.com/tags/basic/"}]},{"title":"Hướng dẫn sử dụng Gitlab-CI/CD cơ bản","slug":"git-lab","date":"2018-10-06T03:48:07.000Z","updated":"2018-10-11T10:20:54.668Z","comments":true,"path":"2018/10/06/git-lab/","link":"","permalink":"https://scala-play.com/2018/10/06/git-lab/","excerpt":"","text":"1. Các chức năng chính Tự động Build và Deploy lên Staging (đã sử dụng được) Tự động Build và Deploy lên Production (đang phát triển) - Chức năng tự động Build và Deploy lên Staging sẽ được kích hoạt khi merge code vàobranch “dev” hoặc push code lên branch “dev”. - Chức năng tự động Build và Deploy lên Production sẽ được kích hoạt khi merge code vàobranch “master” hoặc push code lên branch “master”. 2. Cách sử dụngBước 1: merge code vào branch “dev” hoặc push code lên branch “dev” Bước 2: chờ quá trình Build - Deploy diễn raBước 2.1: Đầu tiên, chúng ta vào mục “Pipelines” để kiểm tra trạng thái của quá trình. Bước 2.2: Nhấn vào “running” để đi tới màn hình chi tiết của quá trình. Bước 2.3: ​ Nhấn vào “staging” để đi tới màn hình console - nơi hiển thị chi tiết quá trình build và deploy dự án lên Staging. - Sau bước này, chúng ta sẽ có kết quả của quá trình Build -&gt; Deploy. Sẽ có hai trường hợp xảy ra: Quá trình xảy ra lỗi: Gitlab-CI/CD sẽ báo trạng thái của quá trình sẽ hiển thị giống như . Hoặc hiển thị “ERROR: Job failed: exit code 1” trên màn hình console ở dòng cuối cùng. Quá trình diễn ra thành công: trạng thái sẽ là . Bước 3: xử lý kết quả của quá trình Build - Deploy Bước 3.1: N​ếu kết quả trả về là thành công . Chúng ta sẽ lên Staging server để xemkết quả, công việc triển khai coi như xong. Ngoài ra, chúng ta có thể xem chi tiết hơn bằngcách: - Vào mục “Builds” để xem tất cả các quá trình Build - Deploy đã thực hiện (bao gồm cả quátrình thực thi lại một lần Build - Deploy nào đó) - Vào mục “Environments” để xem các môi trường đã triển khai. Ở đây, chúng ta mới triểnkhai lên môi trường Staging. Môi trường Production sẽ được triển khai sau… Bước 3.2: Nếu kết quả trả lỗi, chúng ta nên đọc lại phần thông tin hiển thi ở màn hình console trước để tìm ra nguyên nhân. Sau đó đi tới mục “related-code” để xem chi tiết đoạn code nào đã gây lỗi cho hệ thống.","categories":[{"name":"ci/cd","slug":"ci-cd","permalink":"https://scala-play.com/categories/ci-cd/"}],"tags":[{"name":"tutorial","slug":"tutorial","permalink":"https://scala-play.com/tags/tutorial/"}]},{"title":"Higher Order Functions trong Scala","slug":"HOF-in-scala","date":"2018-10-02T13:08:24.000Z","updated":"2018-10-06T06:54:44.078Z","comments":true,"path":"2018/10/02/HOF-in-scala/","link":"","permalink":"https://scala-play.com/2018/10/02/HOF-in-scala/","excerpt":"","text":"Định nghĩa Higher Order FunctionHigher Order Function là function thỏa mãn ít nhất một trong hai điều kiện : Có ít nhất một tham số truyền vào là một function khác Kết quả trả về của HOF đó là một function khác. Với Higher Order Function, tính trừu tượng hóa, tái sử dụng chính là điểm mạnh. Tính trừu tượng hóa (Abstraction)Hãy nghĩ đến dây chuyền lắp ráp một chiếc xe. Dây chuyền gồm bốn bộ phận: Bộ phận tạo bánh xe Bộ phận tạo khung xe Bộ phận tạo động cơ Bộ phận lắp ráp Bộ phận tạo bánh xe sẽ tạo ra bánh xe và chuyển qua bộ phận lắp. Tương tự như vậy, bộ phận tạo khung xe và bộ phân tạo động cợ sẽ tạo ra khung và động cơ, sau đó chuyển sang cho bộ phân lắp ráp. Bộ phận lắp ráp không cần phải biết bánh xe, khung xe hay động cơ xe được tạo ra như thế nào. Chức năng của bộ phận lắp ráp chỉ là ghép các thành phần để tạo ra chiếc xe mà thôi. Bộ phận lắp ráp chính là một HOF, nó nhận output của ba bộ phận còn lại để tạo ra output cho riêng nó. Có thể diễn giải như thế này: 123456789101112131415161718192021222324class BanhXe&#123;&#125; class KhungXe&#123;&#125; class DongCoXe&#123;&#125; // ham tao banh xe def taoBanhXe() = &#123; val banhXe = new BanhXe banhXe &#125; // ham tao khung xe def taoKhungXe() = &#123; val khungXe = new KhungXe khungXe &#125; // ham tao dong co xe def taoDongCoXe() = &#123; val dongCoXe = new DongCoXe dongCoXe &#125; // HOF function def lapRapXe(taoBanhXe(), taoKhungXe(), taoDongCoXe()) Từ ví dụ trên, chúng ta có thể hiểu tính trừu tượng hóa của HOF giúp che giấu chi tiết bên trong một function, làm giảm sự phức tạp. Vấn đề sẽ được xử lý ở một tầng cao hơn, trừu tượng hơn. Tính tái sử dụng (Reusable)Cũng sử dụng ví dụ về dây chuyền tạo ra một chiếc xe. Chúng ta xây dựng một dây chuyền sản xuất xe máy. Tuy nhiên, nếu phải tạo ra thêm một dây chuyền sản xuất xe hơi thêm vào thì sẽ như thế nào ? Tạo ra một dây chuyền mới là giải pháp đơn giản nhất nhưng lại tốn kém về chi phí. Chúng ta có thể bổ sung thêm cho bộ phận tạo bánh xe máy khả năng tạo ra bánh xe hơi. Tương tự như vậy, bộ phận tao khung xe và động cơ đều trang bị thiết bị tạo ra đồng thời linh kiện cho xe máy lẫn xe hơi. Như vậy, ba bộ phân trên đều được sử dụng tùy theo yêu cầu tạo ra sản phẩm. Đó chính là tính tái sử dụng. Cách sử dụng HOF trong ScalaMột bài toán đơn giản được đặt ra, hãy hình dung bạn đang là một ông chủ và muốn tăng lương cho nhân viên của mình. Tăng lương là việc bạn nhân số lương hiện tại của nhân viên với một hệ số nhất định. Bạn nghĩ rằng, việc tăng lương cần linh động do đó phải tạo ra nhiều cách tăng lương khác nhau. Với bài toán trên, chúng ta sẽ đi giải quyết như sau: Để tiện cho việc quản lý vấn đề tăng lương, bạn sử dụng một Object có tên là SalaryRaiser. Bạn có 3 mức tăng lương khác nhau, theo thứ tự tăng dần là: smallPromotion(), greatPromotion() và hugePromotion(). Ở mức smallPromotion, hệ số là 1.1 Ở mức smallPromotion, hệ số là logarit cơ số 10 của số lương hiện tại ứng với nhân viên đó. Ở mức smallPromotion, hệ số là số lương hiện tại của nhân viên đó. Theo cách thông thường, chúng ta sẽ dùng một vòng for để cập nhật giá trị lương của từng nhân viên. Sau đó, trả về danh sách lương của nhân viên sau khi đã cập nhật. Các bạn xem code phía dưới. 123456789101112131415161718192021222324object SalaryRaiser &#123; def smallPromotion(salaries: Array[Double]): Array[Double] = &#123; for (i &lt;- salaries.indices) &#123; salaries(i) = salaries(i) * 1.1 &#125; salaries &#125; def greatPromotion(salaries: Array[Double]): Array[Double] = &#123; for (i &lt;- salaries.indices) &#123; salaries(i) = salaries(i) * math.log(salaries(i)) &#125; salaries &#125; def hugePromotion(salaries: Array[Double]): Array[Double] = &#123; for (i &lt;- salaries.indices) &#123; salaries(i) = salaries(i) * salaries(i) &#125; salaries &#125;&#125; Với HOF, việc viết code trở nên dễ dàng và ngắn gọn hơn khá nhiều. Ở đây, chúng ta sẽ sử dụng một HOF đó là map(). Chúng ta truyền vào map() một function, chính function này sẽ giúp chúng ta thay đổi lương của mỗi nhân viên theo hệ số mong muốn. Hàm map() đã thể hiện tính linh hoạt thông qua việc định nghĩa cách xử lý từng phần tử trong Array. 123456789101112131415object SalaryRaiser &#123; def smallPromotion(salaries: Array[Double]): Array[Double] = &#123; salaries.map(salary =&gt; salary * 1.1) &#125; def greatPromotion(salaries: Array[Double]): Array[Double] = &#123; salaries.map(salary =&gt; salary * math.log(salary)) &#125; def hugePromotion(salaries: Array[Double]): Array[Double] = &#123; salaries.map(salary =&gt; salary * salary) &#125;&#125; Hiện nay đối với Scala, map() là một trong những HOF được dùng nhiều nhất. Ngoài ra, các bạn có thể tìm hiểu thêm về các HOF khác như filter(), flatMap() … Nguồn tham khảo https://discuss.grokking.org/t/higher-order-functions-la-gi-va-d-c-s-d-ng-nh-th-nao/309 https://docs.scala-lang.org/tour/higher-order-functions.html","categories":[{"name":"scala","slug":"scala","permalink":"https://scala-play.com/categories/scala/"}],"tags":[{"name":"basic","slug":"basic","permalink":"https://scala-play.com/tags/basic/"}]}]}